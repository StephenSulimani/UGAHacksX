// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    output        = "../../node_modules/@prisma-app/client"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    address  String
    articles Article[]
    comments Comment[]
    votes    Vote[]
}

model Article {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    cid       String
    createdAt DateTime @default(now())
    userId    String   @map("user_id") @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])

    versions   Article[] @relation("ArticleVersions")
    originalId String?   @db.ObjectId
    original   Article?  @relation("ArticleVersions", fields: [originalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    nextId     String?   @db.ObjectId
    Comment    Comment[]
    Vote       Vote[]
}

model Comment {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    userId    String  @map("user_id") @db.ObjectId
    user      User    @relation(fields: [userId], references: [id])
    articleId String  @map("article_id") @db.ObjectId
    article   Article @relation(fields: [articleId], references: [id])
    message   String
}

model Vote {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    userId    String  @map("user_id") @db.ObjectId
    user      User    @relation(fields: [userId], references: [id])
    articleId String  @map("article_id") @db.ObjectId
    article   Article @relation(fields: [articleId], references: [id])
    score     Int
}
